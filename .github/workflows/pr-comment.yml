name: PR Comment on Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:

permissions:
  pull-requests: write
  issues: write

jobs:
  comment-on-merge:
    name: Comment on Merged PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install git-ai
        run: |
          curl -sSL https://gitai.run/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Get git-ai stats
        id: git-ai-stats
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_SHA="${{ github.sha }}"
          else
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          fi
          git-ai stats $COMMIT_SHA > git_ai_stats.txt
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Comment on merged PR
        uses: actions/github-script@v7
        with:
          script: |
            const commitSha = '${{ steps.git-ai-stats.outputs.commit_sha }}';
            const eventName = '${{ github.event_name }}';

            // Read stats from file to avoid YAML escaping issues
            const fs = require('fs');
            const statsOutput = fs.readFileSync('git_ai_stats.txt', 'utf8');

            let title, body;

            if (eventName === 'push') {
              title = '🚀 **Code Pushed!**';
              body = '```\n' + statsOutput + '\n```';
              
              // For push events, create a commit comment
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commitSha,
                body: title + '\n\n' + body
              });
            } else {
              title = '📝 **PR Commit Analysis**';
              body = '```\n' + statsOutput + '\n```';
              
              // For PR events, create a PR comment
              const { owner, repo, number } = context.issue;
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: title + '\n\n' + body
              });
            }
